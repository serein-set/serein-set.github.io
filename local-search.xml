<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kubernetes学习笔记01||Kubernetes介绍</title>
    <link href="/2021/08/15/chapter01-kubernetes%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/08/15/chapter01-kubernetes%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="Chapter01-Kubernetes介绍"><a href="#Chapter01-Kubernetes介绍" class="headerlink" title="Chapter01 || Kubernetes介绍"></a>Chapter01 || Kubernetes介绍</h2><h3 id="1-1-应用部署方式演变"><a href="#1-1-应用部署方式演变" class="headerlink" title="1.1 应用部署方式演变"></a>1.1 应用部署方式演变</h3><ul><li><p>部署应用程序的变化</p><ul><li><p><strong>传统部署</strong>：互联网早期，会直接将应用程序部署在物理机上</p><blockquote><p>优点：简单，不需要其它技术的参与</p><p>缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响</p></blockquote></li><li><p><strong>虚拟化部署</strong>：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境</p><blockquote><p>优点：程序环境不会相互产生影响，提供了一定程度的安全性</p><p>缺点：增加了操作系统，浪费了部分资源</p></blockquote></li><li><p><strong>容器化部署</strong>：与虚拟化类似，但是共享了操作系统</p><blockquote><p>优点：</p><ol><li><p>可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等</p></li><li><p>运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦</p></li><li><p>容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p></li></ol></blockquote></li></ul></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210806144025.png"></p><ul><li><p>容器化部署方式存在的问题–容器编排问题–<strong>为什么需要容器调度平台</strong></p><blockquote><ul><li>有了容器，开发人员就只需要考虑如何恰当地扩展、部署，以及管理他们新开发的应用程序。但如果我们大规模地使用容器，就不得不考虑容器调度、部署、跨多节点访问、自动伸缩等问题</li></ul></blockquote></li><li><p>一个容器调度系统需要什么</p><table><thead><tr><th align="center">能力</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">调度</td><td align="center">自动生成容器实例</td></tr><tr><td align="center">亲和/反亲和</td><td align="center">生成的容器可以相邻或者相隔，帮助提高可用性和性能</td></tr><tr><td align="center">健康检查</td><td align="center">自动监测容器的健康状态</td></tr><tr><td align="center">容错</td><td align="center">自动在健康的节点上重新生成容器实例</td></tr><tr><td align="center">可扩展</td><td align="center">自动根据需要增加或者删除容器实例</td></tr><tr><td align="center">网络</td><td align="center">允许容器之间互相通信</td></tr><tr><td align="center">服务发现</td><td align="center">允许容器之间互相发现</td></tr><tr><td align="center">滚动升级</td><td align="center">容器升级可以避免对业务造成影响，同时出错回滚</td></tr></tbody></table></li><li><p>为了解决上述 容器编排问题，产生了一些容器编排引擎工具（容器管理调度平台）</p><ul><li><strong>Kubernetes</strong>：Google开源的的容器编排工具。目标就是消除编排物理或者虚拟计算、网络和存储等基础设施负担，让应用运营商和开发工作者可以专注在以容器为核心的应用上面，同时可以优化集群的资源利用率。<strong>Kubernetes 采用了 Pod 和 Label 这样的概念，把容器组合成一个个相互依赖的逻辑单元，相关容器被组合成 Pod 后被共同部署和调度，就形成了服务</strong>，这也是 Kuberentes 和其他两个调度管理系统最大的区别。</li><li><strong>Swarm</strong>：Docker 公司自己的产品，会直接调度 Docker 容器，并且使用标准的 Docker API 语义，为用户提供无缝衔接的使用体验。Swarm 更多的是面向于开发者，而且对容错性支持不够好。</li><li><strong>Mesos</strong>：是一个分布式资源管理平台，提供了 Framework 注册机制。接入的框架必须有一个Framework Scheduler 模块负责框架内部的任务调度，还有一个 Framework Executor 负责启动运行框架内的任务。需要和Marathon结合使用。</li></ul></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210806144259.png"></p><h3 id="1-2-kubernetes简介"><a href="#1-2-kubernetes简介" class="headerlink" title="1.2 kubernetes简介"></a>1.2 kubernetes简介</h3><p><img src="https://gitee.com/serein-set/pic/raw/master/20210806144331.png"></p><p>kubernetes，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器—-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。</p><p>kubernetes的本质是<strong>一组服务器集群</strong>，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：</p><ul><li><strong>自我修复</strong>：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li><li><strong>弹性伸缩</strong>：可以根据需要，自动对集群中正在运行的容器数量进行调整</li><li><strong>服务发现</strong>：服务可以通过自动发现的形式找到它所依赖的服务</li><li><strong>负载均衡</strong>：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li><li><strong>版本回退</strong>：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li><li><strong>存储编排</strong>：可以根据容器自身的需求自动创建存储卷</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210806145053.png"></p><h3 id="1-3-kubernetes组件"><a href="#1-3-kubernetes组件" class="headerlink" title="1.3 kubernetes组件"></a>1.3 kubernetes组件</h3><p>一个kubernetes集群主要是由<strong>控制节点(Master)<strong>、</strong>工作节点( Node)<strong>、</strong>Addons</strong>构成，每个节点上都会安装不同的组件</p><ul><li><p><strong>Master：集群的控制平面，负责集群的决策 ( 管理 )</strong></p><blockquote><p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p><p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p><p><strong>Controller-Manager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p><p><strong>Etcd</strong> ：负责存储集群中各种资源对象的信息（包括当前集群的状态信息和配置信息）</p></blockquote></li><li><p><strong>Node：集群的数据平面，负责为容器提供运行环境 ( 工作 )</strong></p><blockquote><p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p><p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p><p><strong>容器引擎</strong> : 负责节点上容器的各种操作（Docker、rkt…）</p></blockquote></li><li><p><strong>Addons</strong>：Addons 使用 Kubernetes 资源（DaemonSet、Deployment等）实现集群的功能特性。由于他们提供集群级别的功能特性，addons使用到的Kubernetes资源都放置在 <code>kube-system</code> 名称空间下。</p></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210806150333.png"></p><ul><li><p>kubernetes系统各个组件调用关系–示例：部署一个Nginx服务</p><ol><li><p>首先，kubernetes环境启动，master和node组件都会将自身的信息存储到Etcd数据库中</p></li><li><p>Nginx服务的安装请求会首先被发送到master节点的ApiServer组件</p></li><li><p>ApiServer组件会调用Scheduler组件来决定到底应该把这个服务安装到哪个node节点上</p><p>在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知ApiServer</p></li><li><p>ApiServer调用Controller-manager去调度Node节点安装nginx服务</p></li><li><p>Kubelet接收到指令后，会通知Docker，然后由docker来启动一个Nginx的pod</p><ul><li>pod是kubernetes的最小操作单元，容器必须跑在pod中</li></ul></li><li><p>一个Nginx服务就运行了，如果需要访问Nginx，就需要通过KubeProxy来对pod产生访问的代理</p></li></ol></li></ul><h3 id="1-4-kubernetes概念"><a href="#1-4-kubernetes概念" class="headerlink" title="1.4 kubernetes概念"></a>1.4 kubernetes概念</h3><ul><li><p><strong>Master</strong>：集群控制节点，每个集群需要至少一个master节点负责集群的管控</p></li><li><p><strong>Node</strong>：工作负载节点，由Master分配容器到这些node工作节点上,然后Node节点上的容器引擎负责容器的运行。Node 是 Pod 真正运行的主机，可以是物理机，也可以是虚拟机。为了管理 Pod，每个 Node 节点上至少要运行 container runtime（比如 docker 或者 rkt）、<code>kubelet</code> 和 <code>kube-proxy</code> 服务。</p></li><li><p><strong>Pod</strong>：kubernetes调度的基本单位，Kubernetes 使用 Pod 来管理容器，每个 Pod 可以包含一个或多个紧密关联的容器</p></li><li><p><strong>Controller</strong>：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等。Controller有很多种类，不同的Controller有不同的应用场景。</p></li><li><p><strong>Service</strong>：Service 是应用服务的抽象，通过 labels 为应用提供负载均衡和服务发现。pod对外服务的统一入口，下面可以维护者同一类的多个pod。</p><ul><li>匹配 labels 的 Pod IP 和端口列表组成 endpoints，由 kube-proxy 负责将服务 IP 负载均衡到这些 endpoints 上。</li><li>每个 Service 都会自动分配一个 cluster IP（仅在集群内部可访问的虚拟地址）和 DNS 名，其他容器可以通过该地址或 DNS 来访问服务，而不需要了解后端容器的运行。</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210806153103.png"></p></li><li><p><strong>Label</strong>：Label 是识别 Kubernetes 对象的标签，以 key/value 的方式附加到对象上。标签，用于对pod进行分类，同一类pod会拥有相同的标签。</p></li><li><p><strong>NameSpace</strong>：Namespace 是对一组资源和对象的抽象集合。命名空间，用来隔离pod的运行环境。</p></li><li><p><strong>Container</strong>：Container（容器）是一种便携式、轻量级的操作系统级虚拟化技术。它使用 namespace 隔离不同的软件运行环境，并通过镜像自包含软件的运行环境，从而使得容器可以很方便的在任何地方运行。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes学习笔记03||资源管理</title>
    <link href="/2021/08/15/chapter03-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    <url>/2021/08/15/chapter03-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Chapter03-资源管理"><a href="#Chapter03-资源管理" class="headerlink" title="Chapter03 || 资源管理"></a>Chapter03 || 资源管理</h2><h3 id="3-1-资源管理介绍"><a href="#3-1-资源管理介绍" class="headerlink" title="3.1 资源管理介绍"></a>3.1 资源管理介绍</h3><ul><li>在kubernetes中，所有的内容都抽象为<strong>资源</strong>，用户需要通过操作资源来管理kubernetes。</li></ul><blockquote><ul><li>kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。</li><li>kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在<code>Pod</code>中，而kubernetes一般也不会直接管理Pod，而是通过<code>Pod控制器</code>来管理Pod的。</li><li>Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了<code>Service</code>资源实现这个功能。</li><li>当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种<code>存储</code>系统。</li></ul></blockquote><p><img src="https://gitee.com/serein-set/pic/raw/master/20210813111805.png"></p><blockquote><p>学习kubernetes的核心，就是学习如何对集群上的<code>Pod、Pod控制器、Service、存储</code>等各种资源进行操作</p></blockquote><h3 id="3-2-YAML语法介绍"><a href="#3-2-YAML语法介绍" class="headerlink" title="3.2 YAML语法介绍"></a>3.2 YAML语法介绍</h3><ul><li><p>YAML是一个类似 XML、JSON 的标记性语言。它强调以<strong>数据</strong>为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称”一种人性化的数据格式语言”。</p></li><li><p>YAML的语法比较简单，主要有下面几个：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格( 低版本限制 )</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ul></li><li><p>YAML支持以下几种数据类型：</p><ul><li>纯量：单个的、不可再分的值</li><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期</span><br><span class="hljs-comment"># 1 布尔类型</span><br><span class="hljs-attr">c1:</span> <span class="hljs-literal">true</span> <span class="hljs-string">(或者True)</span><br><span class="hljs-comment"># 2 整型</span><br><span class="hljs-attr">c2:</span> <span class="hljs-number">234</span><br><span class="hljs-comment"># 3 浮点型</span><br><span class="hljs-attr">c3:</span> <span class="hljs-number">3.14</span><br><span class="hljs-comment"># 4 null类型 </span><br><span class="hljs-attr">c4:</span> <span class="hljs-string">~</span>  <span class="hljs-comment"># 使用~表示null</span><br><span class="hljs-comment"># 5 日期类型</span><br><span class="hljs-attr">c5:</span> <span class="hljs-number">2018-02-17</span>    <span class="hljs-comment"># 日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class="hljs-comment"># 6 时间类型</span><br><span class="hljs-attr">c6:</span> <span class="hljs-number">2018-02-17T15:02:31+08:00</span>  <span class="hljs-comment"># 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br><span class="hljs-comment"># 7 字符串类型</span><br><span class="hljs-attr">c7:</span> <span class="hljs-string">heima</span>     <span class="hljs-comment"># 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 </span><br><span class="hljs-attr">c8:</span> <span class="hljs-string">line1</span><br>    <span class="hljs-string">line2</span>     <span class="hljs-comment"># 字符串过多的情况可以拆成多行，每一行会被转化成一个空格</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 对象</span><br><span class="hljs-comment"># 形式一(推荐):</span><br><span class="hljs-attr">heima:</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">15</span><br>  <span class="hljs-attr">address:</span> <span class="hljs-string">Beijing</span><br><span class="hljs-comment"># 形式二(了解):</span><br><span class="hljs-attr">heima:</span> &#123;<span class="hljs-attr">age:</span> <span class="hljs-number">15</span>,<span class="hljs-attr">address:</span> <span class="hljs-string">Beijing</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 数组</span><br><span class="hljs-comment"># 形式一(推荐):</span><br><span class="hljs-attr">address:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">顺义</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">昌平</span>  <br><span class="hljs-comment"># 形式二(了解):</span><br><span class="hljs-attr">address:</span> [<span class="hljs-string">顺义</span>,<span class="hljs-string">昌平</span>]<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>小提示：</p><p>1 书写yaml切记<code>:</code> 后面要加一个空格</p><p>2 如果需要将多段yaml配置放在一个文件中，中间要使用<code>---</code>分隔</p><p>3 下面是一个yaml转json的网站，可以通过它验证yaml是否书写正确</p><p><a href="https://www.json2yaml.com/convert-yaml-to-json">https://www.json2yaml.com/convert-yaml-to-json</a></p></blockquote><h3 id="3-3-资源管理方式"><a href="#3-3-资源管理方式" class="headerlink" title="3.3 资源管理方式"></a>3.3 资源管理方式</h3><ul><li><p>命令式对象管理：直接使用命令去操作kubernetes资源</p><p><code>kubectl run nginx-pod --image=nginx:1.17.1 --port=80</code></p></li><li><p>命令式对象配置：通过命令配置和配置文件去操作kubernetes资源</p><p><code>kubectl create/patch -f nginx-pod.yaml</code></p></li><li><p>声明式对象配置：通过apply命令和配置文件去操作kubernetes资源</p><p><code>kubectl apply -f nginx-pod.yaml</code>     （apply只应用创建和更新资源，不能删除资源）</p></li></ul><table><thead><tr><th align="center">类型</th><th align="center">操作对象</th><th align="center">适用环境</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">命令式对象管理</td><td align="center">对象</td><td align="center">测试</td><td align="center">简单</td><td align="center">只能操作活动对象，无法审计、跟踪</td></tr><tr><td align="center">命令式对象配置</td><td align="center">文件</td><td align="center">开发</td><td align="center">可以审计、跟踪</td><td align="center">项目大时，配置文件多，操作麻烦</td></tr><tr><td align="center">声明式对象配置</td><td align="center">目录</td><td align="center">开发</td><td align="center">支持目录操作</td><td align="center">意外情况下难以调试</td></tr></tbody></table><h4 id="3-4-1-命令式对象管理"><a href="#3-4-1-命令式对象管理" class="headerlink" title="3.4.1 命令式对象管理"></a>3.4.1 命令式对象管理</h4><ul><li><p><strong>kubectl命令</strong></p><ul><li><p>kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl [<span class="hljs-built_in">command</span>] [<span class="hljs-built_in">type</span>] [name] [flags]</span><br>- comand：指定要对资源执行的操作，例如create、get、delete<br>- type：指定资源类型，比如deployment、pod、service<br>- name：指定资源的名称，名称大小写敏感<br>- flags：指定额外的可选参数<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看所有pod</span><br>kubectl get pod <br><span class="hljs-meta">#</span><span class="bash"> 查看某个pod</span><br>kubectl get pod pod_name<br><span class="hljs-meta">#</span><span class="bash"> 查看某个pod,以yaml格式展示结果</span><br>kubectl get pod pod_name -o yaml<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>资源类型</strong></p><ul><li><p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl api-resources</span><br></code></pre></td></tr></table></figure></li><li><p>经常使用的资源有下面这些：</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210813152938.png"></p></li></ul></li><li><p><strong>操作</strong></p><ul><li><p>kubernetes允许对资源进行多种操作，可以通过–help查看详细的操作命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl --<span class="hljs-built_in">help</span></span><br></code></pre></td></tr></table></figure></li><li><p>经常使用的操作有下面这些:</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210813153640.png"></p></li></ul></li><li><p><strong>示例</strong>–以一个namespace / pod的创建和删除简单演示下命令的使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建一个namespace</span><br>[root@master ~]# kubectl create namespace dev<br>namespace/dev created<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 获取namespace</span><br>[root@master ~]# kubectl get ns<br>NAME              STATUS   AGE<br>default           Active   21h<br>dev               Active   21s # 除了dev 其余都是集群自带的<br>kube-node-lease   Active   21h<br>kube-public       Active   21h<br>kube-system       Active   21h<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在此namespace下创建并运行一个nginx的Pod</span><br>[root@master ~]# kubectl run pod --image=nginx:latest -n dev<br>kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.<br>deployment.apps/pod created<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看新创建的pod</span><br>[root@master ~]# kubectl get pod -n dev<br>NAME  READY   STATUS    RESTARTS   AGE<br>pod   1/1     Running   0          21s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除指定的pod</span><br>[root@master ~]# kubectl delete pod pod-864f9875b9-pcw7x <br>pod &quot;pod&quot; deleted<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 删除指定的namespace</span><br>[root@master ~]# kubectl delete ns dev<br>namespace &quot;dev&quot; deleted<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-4-2-命令式对象配置"><a href="#3-4-2-命令式对象配置" class="headerlink" title="3.4.2 命令式对象配置"></a>3.4.2 命令式对象配置</h4><ul><li>命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。</li></ul><ol><li><p>创建一个nginxpod.yaml，内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# vim nginxpod.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginxpod</span> <span class="hljs-comment"># dev命名空间下的Pod的名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># Pod所在命名空间叫dev</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-containers</span> <span class="hljs-comment"># Pod里的容器名称</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span>   <span class="hljs-comment"># 容器使用的镜像</span><br></code></pre></td></tr></table></figure></li><li><p>执行create命令，创建资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl create -f nginxpod.yaml<br>namespace/dev created<br>pod/nginxpod created<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 此时发现创建了两个资源对象，分别是namespace和pod</span><br></code></pre></td></tr></table></figure></li><li><p>执行get命令，查看资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]#  kubectl get ns dev<br>NAME            STATUS   AGE<br>namespace/dev   Active   18s<br><br>[root@master ~]#  kubectl get pod -n dev<br>NAME            READY   STATUS    RESTARTS   AGE<br>nginxpod    1/1     Running   0          17s<br></code></pre></td></tr></table></figure></li><li><p>执行delete命令，删除资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl delete -f nginxpod.yaml<br>namespace &quot;dev&quot; deleted<br>pod &quot;nginxpod&quot; deleted<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>总结:<br>命令式对象配置的方式操作资源，可以简单的认为：命令  +  yaml配置文件（里面是命令需要的各种参数）</p></blockquote><h4 id="3-4-3-声明式对象配置"><a href="#3-4-3-声明式对象配置" class="headerlink" title="3.4.3 声明式对象配置"></a>3.4.3 声明式对象配置</h4><ul><li><p>声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先执行一次kubectl apply -f yaml文件，发现创建了资源</span><br>[root@master ~]#  kubectl apply -f nginxpod.yaml<br>namespace/dev created<br>pod/nginxpod created<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 再次执行一次kubectl apply -f yaml文件，发现说资源没有变动</span><br>[root@master ~]#  kubectl apply -f nginxpod.yaml<br>namespace/dev unchanged<br>pod/nginxpod unchanged<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>总结:<br>   其实声明式对象配置就是使用apply描述一个资源最终的状态（在yaml中定义状态）<br>   使用apply操作资源：<br>        如果资源不存在，就创建，相当于 kubectl create<br>        如果资源已存在，就更新，相当于 kubectl patch</p></blockquote><blockquote><p>扩展：kubectl可以在node节点上运行吗 ?</p><ul><li><p>kubectl的运行是需要进行配置的，它的配置文件是$HOME/.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> scp  -r  HOME/.kube   node1: HOME/</span><br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>使用推荐: 三种方式应该怎么用 ?</p><ul><li><p>创建/更新资源 使用声明式对象配置 kubectl apply -f XXX.yaml</p></li><li><p>删除资源 使用命令式对象配置 kubectl delete -f XXX.yaml</p></li><li><p>查询资源 使用命令式对象管理 kubectl get(describe) 资源名称</p></li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes学习笔记02||Kubernetes集群搭建</title>
    <link href="/2021/08/15/chapter02-kubernetes%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/08/15/chapter02-kubernetes%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Chapter02-集群环境搭建–一主两从集群"><a href="#Chapter02-集群环境搭建–一主两从集群" class="headerlink" title="Chapter02 || 集群环境搭建–一主两从集群"></a>Chapter02 || 集群环境搭建–一主两从集群</h2><h3 id="2-1-环境规划"><a href="#2-1-环境规划" class="headerlink" title="2.1 环境规划"></a>2.1 环境规划</h3><h4 id="2-1-1-集群类型"><a href="#2-1-1-集群类型" class="headerlink" title="2.1.1 集群类型"></a>2.1.1 集群类型</h4><ul><li>目前Kubernetes集群大体上分为两类：<strong>一主多从</strong> 和 多主多从<ul><li><strong>一主多从</strong>：一台Master节点和多台Node节点。搭建简单，但是有单机故障风险，适合于测试环境。</li><li><strong>多主多从</strong>：多台Master节点和多台Node节点。搭建复杂，安全性高，适合于生产环境。</li></ul></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210806154136.png"></p><h4 id="2-1-2-安装方式"><a href="#2-1-2-安装方式" class="headerlink" title="2.1.2 安装方式"></a>2.1.2 安装方式</h4><ul><li><p>Kubernetes 集群主流的几种部署方式</p><ul><li><p>Kubeadm </p><ul><li>是一个K8s 部署工具，提供kubeadm init 和kubeadm join，用于快速部署Kubernetes 集群。这个工具能通过两条指令完成一个kubernetes 集群的部署：<ul><li>创建一个Master 节点kubeadm init</li><li>将Node 节点加入到当前集群中$ kubeadm join &lt;Master 节点的IP 和端口&gt;</li></ul></li><li>官方地址：<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></li></ul></li><li><p>二进制包</p><ul><li>从github下载发行版的二进制包，手动部署每个组件，组成Kubernetes集群。</li></ul></li></ul></li></ul><h4 id="2-1-3-主机规划"><a href="#2-1-3-主机规划" class="headerlink" title="2.1.3 主机规划"></a>2.1.3 主机规划</h4><table><thead><tr><th align="center">作用</th><th align="center">IP地址</th><th align="center">操作系统</th><th align="center">配置</th><th>组件</th></tr></thead><tbody><tr><td align="center">Master</td><td align="center">192.168.109.100</td><td align="center">Linux（Cnetos7.5+）基础设施服务器</td><td align="center">CPU≥2，硬盘≥50GB，内存≥2G</td><td>docker，kubectl，kubeadm，kubelet</td></tr><tr><td align="center">Node1</td><td align="center">192.168.109.101</td><td align="center">Linux（Cnetos7.5+）基础设施服务器</td><td align="center">CPU≥2，硬盘≥50GB，内存≥2G</td><td>docker，kubectl，kubeadm，kubelet</td></tr><tr><td align="center">Node2</td><td align="center">192.168.109.102</td><td align="center">Linux（Cnetos7.5+）基础设施服务器</td><td align="center">CPU≥2，硬盘≥50GB，内存≥2G</td><td>docker，kubectl，kubeadm，kubelet</td></tr></tbody></table><ul><li>安装要求<ul><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像</li><li>分区：自动分区，禁止swap分区</li></ul></li></ul><h3 id="2-2-环境搭建"><a href="#2-2-环境搭建" class="headerlink" title="2.2  环境搭建"></a>2.2  环境搭建</h3><h4 id="2-2-1-主机安装"><a href="#2-2-1-主机安装" class="headerlink" title="2.2.1 主机安装"></a>2.2.1 主机安装</h4><h5 id="1-使用VMware虚拟三台服务器–以master为例"><a href="#1-使用VMware虚拟三台服务器–以master为例" class="headerlink" title="1. 使用VMware虚拟三台服务器–以master为例"></a>1. 使用VMware虚拟三台服务器–以master为例</h5><ol><li><p>创建新的虚拟机–&gt;自定义</p><p><img src="E:\Image\20210806163421.png"></p></li><li><p>下一步，直到选择稍后安装操作系统</p></li></ol><p><img src="E:\Image\20210806163605.png"></p><ol start="3"><li>下一步</li></ol><p><img src="E:\Image\20210806163644.png"></p><ol start="4"><li>下一步</li></ol><p><img src="E:\Image\image-20210806163802667.png"></p><ol start="5"><li>下一步</li></ol><p><img src="E:\Image\20210806163842.png"></p><ol start="6"><li>下一步</li></ol><p><img src="E:\Image\20210806163917.png" alt="image-20210806163917110"></p><ol start="7"><li>下一步</li></ol><p><img src="E:\Image\20210806163940.png"></p><ol start="8"><li>下一步，直到如下这一步</li></ol><p><img src="E:\Image\20210806164018.png"></p><ol start="9"><li><p>全部点下一步，创建虚拟机master完成，启动虚拟机，启动虚拟机之前，编辑虚拟机设置，为其添加镜像安装系统</p><p><img src="E:\Image\20210806164336.png"></p></li><li><p>启动虚拟机安装过程</p><ul><li><p>语言：简体中文</p></li><li><p>软件选择：基础设施服务</p><p><img src="E:\Image\20210806164544.png"></p></li><li><p>安装位置：自动分区（如果有黄色感叹号，点进去双击完成确认）</p></li></ul></li></ol><h5 id="2-网络和主机名"><a href="#2-网络和主机名" class="headerlink" title="2. 网络和主机名"></a>2. 网络和主机名</h5><p><img src="E:\Image\20210806164735.png"></p><p><img src="E:\Image\20210806164835.png"></p><ol><li><p>常规</p><p><img src="E:\Image\20210806162145.png"></p><ol start="2"><li><p>配置IP地址</p><p><img src="E:\Image\20210806162221.png"></p><p> <img src="E:\Image\20210806162338.png"></p><ul><li>如何查看自己的网络地址？<ul><li>Vmware 编辑选项卡 –&gt;虚拟网络编辑器</li></ul></li></ul><p><img src="E:\Image\20210806162538.png"></p></li><li><p>配置DNS服务区–域名解析</p><p><img src="E:\Image\20210806162823.png"></p><p><img src="E:\Image\20210806163152.png"></p></li></ol></li></ol><h5 id="3-设置用户和密码，完成安装"><a href="#3-设置用户和密码，完成安装" class="headerlink" title="3. 设置用户和密码，完成安装"></a>3. 设置用户和密码，完成安装</h5><p><img src="E:\Image\20210806164922.png"></p><h4 id="2-2-2-环境初始化"><a href="#2-2-2-环境初始化" class="headerlink" title="2.2.2 环境初始化"></a>2.2.2 环境初始化</h4><h5 id="1-检查操作系统版本"><a href="#1-检查操作系统版本" class="headerlink" title="1. 检查操作系统版本"></a>1. 检查操作系统版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 此方式下的安装k8s集群要求centos7.5+版本</span><br><span class="hljs-meta">$</span><span class="bash"> cat /etc/redhat-release</span><br></code></pre></td></tr></table></figure><h5 id="2-主机名解析（所有节点都要操作）"><a href="#2-主机名解析（所有节点都要操作）" class="headerlink" title="2. 主机名解析（所有节点都要操作）"></a>2. 主机名解析（所有节点都要操作）</h5><ul><li>为了方便后面集群节点的使用，配置主机名解析。实际企业生产中使用内部DNS服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 主机名解析 ，编辑三台服务器器的/etc/hosts文件，添加前面主机规划中设置的IP地址内容</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> hostnamectl set-hostname k8s-master01 &amp;&amp; bash</span><br><span class="hljs-meta">$</span><span class="bash"> hostnamectl set-hostname k8s-node01 &amp;&amp; bash</span><br><span class="hljs-meta">$</span><span class="bash"> hostnamectl set-hostname k8s-node02 &amp;&amp; bash</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> vim /etc/hosts</span><br>192.169.109.100 master<br>192.169.109.101 node1<br>192.169.109.102 node2<br></code></pre></td></tr></table></figure><h5 id="3-安装依赖文件（所有节点但都要操作）"><a href="#3-安装依赖文件（所有节点但都要操作）" class="headerlink" title="3. 安装依赖文件（所有节点但都要操作）"></a>3. 安装依赖文件（所有节点但都要操作）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git<br></code></pre></td></tr></table></figure><h6 id="4-调整系统时区（所有节点都要操作）"><a href="#4-调整系统时区（所有节点都要操作）" class="headerlink" title="4.  调整系统时区（所有节点都要操作）"></a>4.  调整系统时区（所有节点都要操作）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 设置系统时区为 中国/上海</span><br>timedatectl set-timezone Asia/Shanghai<br><span class="hljs-meta">#</span><span class="bash"> 将当前的 UTC 时间写入硬件时钟</span><br>timedatectl set-local-rtc 0<br><span class="hljs-meta">#</span><span class="bash"> 重启依赖于系统时间的服务</span><br>systemctl restart rsyslog<br>systemctl restart crond<br></code></pre></td></tr></table></figure><h5 id="5-时间同步（所有节点都要操作）"><a href="#5-时间同步（所有节点都要操作）" class="headerlink" title="5. 时间同步（所有节点都要操作）"></a>5. 时间同步（所有节点都要操作）</h5><p>kubernetes要求集群中的节点时间必须精确一致，这里直接使用chronya服务从网络同步时间（企业中建议配置内部的时间同步服务器）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启用chronyd服务</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl start chronyd</span><br><span class="hljs-meta">#</span><span class="bash"> 设置chronyd服务开机自启</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl <span class="hljs-built_in">enable</span> chronyd</span><br><span class="hljs-meta">#</span><span class="bash"> chronyd服务启动稍等几分钟，就可以使用date命令验证时间了</span><br><span class="hljs-meta">$</span><span class="bash"> date</span><br></code></pre></td></tr></table></figure><h5 id="6-禁用iptables和firewalld服务（所有节点都要操作）"><a href="#6-禁用iptables和firewalld服务（所有节点都要操作）" class="headerlink" title="6. 禁用iptables和firewalld服务（所有节点都要操作）"></a>6. 禁用iptables和firewalld服务（所有节点都要操作）</h5><p>kubernetes和docker在运行中回产生大量的iptables规则，为了不让系统规则跟他们混淆，直接管理系统的规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 关闭firewalld服务</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 关闭iptables服务</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl stop iptables &amp;&amp; systemctl <span class="hljs-built_in">disable</span> iptables</span><br><br>yum -y install iptables-services &amp;&amp; systemctl start iptables &amp;&amp; systemctl enable iptables &amp;&amp; iptables -F &amp;&amp; service iptables save<br></code></pre></td></tr></table></figure><h5 id="7-关闭-SELINUX（所有节点都要操作）"><a href="#7-关闭-SELINUX（所有节点都要操作）" class="headerlink" title="7. 关闭 SELINUX（所有节点都要操作）"></a>7. 关闭 SELINUX（所有节点都要操作）</h5><p>selinux是linux 下的一个安全服务，如果不关闭它，在安装集群中会产生各种各样的奇葩问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 编辑 /etc/selinux/config</span><br><span class="hljs-meta">#</span><span class="bash"> 注意修改完毕之后需要重启linux服务</span><br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h5 id="8-禁用swap分区（所有节点都要操作）"><a href="#8-禁用swap分区（所有节点都要操作）" class="headerlink" title="8. 禁用swap分区（所有节点都要操作）"></a>8. 禁用swap分区（所有节点都要操作）</h5><ul><li>swap分区指的是虚拟内存分区，其作用时在物理内存使用完之后，将磁盘空间虚拟成内存来使用</li><li>启用swap设备会对系统的性能产生非常负面的影响，因此kubernetes要求每个节点都要禁用swap设备</li><li>但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 编辑分区配置文件/etc/fstab,注释掉swap分区一行</span><br><span class="hljs-meta">#</span><span class="bash"> 注意修改完毕之后需要重启Linux服务</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/serein-set/pic/raw/master/20210811105410.png"></p><h5 id="9-修改Linux内核参数（所有节点都要操作）"><a href="#9-修改Linux内核参数（所有节点都要操作）" class="headerlink" title="9.修改Linux内核参数（所有节点都要操作）"></a>9.修改Linux内核参数（所有节点都要操作）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改Linux的内核参数，添加网桥过滤和地址转发功能</span><br><span class="hljs-meta">#</span><span class="bash"> 编辑/etc/sysctl.d/kubernetes.conf文件，添加如下配置：</span><br>net.bridge.bridge-nf-call-iptables=1<br>net.bridge.bridge-nf-call-ip6tables=1<br>net.ipv4.ip_forward=1<br>net.ipv4.tcp_tw_recycle=0<br>vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它<br>vm.overcommit_memory=1 # 不检查物理内存是否够用<br>vm.panic_on_oom=0 # 开启 OOM<br>fs.inotify.max_user_instances=8192<br>fs.inotify.max_user_watches=1048576<br>fs.file-max=52706963<br>fs.nr_open=52706963<br>net.ipv6.conf.all.disable_ipv6=1<br>net.netfilter.nf_conntrack_max=2310720<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 重新加载配置</span><br><span class="hljs-meta">$</span><span class="bash"> sysctl -p</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 加载网桥过滤模块</span><br><span class="hljs-meta">$</span><span class="bash"> modprobe br_netfilter</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看网桥过滤模块是否加载成功</span><br><span class="hljs-meta">$</span><span class="bash"> lsmod | grep br_netfilter</span><br></code></pre></td></tr></table></figure><h5 id="10-配置ipvs功能（所有节点都要操作）"><a href="#10-配置ipvs功能（所有节点都要操作）" class="headerlink" title="10. 配置ipvs功能（所有节点都要操作）"></a>10. 配置ipvs功能（所有节点都要操作）</h5><p>在kubernetes中service有两种代理模型，一种是基于iptables，一种是基于ipvs的，两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1. 安装ipset 和 ipvsadm</span><br><span class="hljs-meta">$</span><span class="bash"> yum install ipset ipvsadm -y</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 2. 添加需要加载的模块写入脚本文件</span><br><span class="hljs-meta">$</span><span class="bash"> cat &lt;&lt;<span class="hljs-string">EOF&gt; /etc/sysconfig/modules/ipvs.modules</span></span> <br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string">!/bin/bash</span></span><br>modprobe -- ip_vs<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- ip_vs_sh<br>modprobe -- nf_conntrack_ipv4<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 3. 为脚本文件添加执行权限</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> chmod +x /etc/sysconfig/modules/ipvs.modules</span></span> <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 4. 执行脚本文件</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> /bin/bash /etc/sysconfig/modules/ipvs.modules</span></span> <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 5. 查看对应的模块是否加载成功</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span></span><br></code></pre></td></tr></table></figure><h5 id="11-设置-rsyslogd-和-systemd-journald（所有节点都要操作）"><a href="#11-设置-rsyslogd-和-systemd-journald（所有节点都要操作）" class="headerlink" title="11. 设置 rsyslogd 和 systemd journald（所有节点都要操作）"></a>11. 设置 rsyslogd 和 systemd journald（所有节点都要操作）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 持久化保存日志的目录</span><br><span class="hljs-meta">$</span><span class="bash"> mkdir /var/<span class="hljs-built_in">log</span>/journal</span> <br><span class="hljs-meta">$</span><span class="bash"> mkdir /etc/systemd/journald.conf.d</span><br><span class="hljs-meta">$</span><span class="bash"> cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;<span class="hljs-string">EOF</span></span><br>[Journal]<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 持久化保存到磁盘</span></span><br>Storage=persistent<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 压缩历史日志</span></span><br>Compress=yes<br><br>SyncIntervalSec=5m<br>RateLimitInterval=30s<br>RateLimitBurst=1000<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 最大占用空间 10G</span></span><br>SystemMaxUse=10G<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 单日志文件最大 200M</span></span><br>SystemMaxFileSize=200M<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 日志保存时间 2 周</span></span><br>MaxRetentionSec=2week<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 不将日志转发到 syslog</span></span><br>ForwardToSyslog=no<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> systemctl restart systemd-journald</span></span><br></code></pre></td></tr></table></figure><h5 id="12-重启服务器（所有节点都要操作）"><a href="#12-重启服务器（所有节点都要操作）" class="headerlink" title="12. 重启服务器（所有节点都要操作）"></a>12. 重启服务器（所有节点都要操作）</h5><p>上述步骤完成之后，需要重启Linux系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> reboot</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3-安装Docker（所有节点都要操作）"><a href="#2-2-3-安装Docker（所有节点都要操作）" class="headerlink" title="2.2.3 安装Docker（所有节点都要操作）"></a>2.2.3 安装Docker（所有节点都要操作）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1. 切换镜像源</span><br><span class="hljs-meta">$</span><span class="bash"> wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 2. 查看当前镜像源中支持的docker版本</span><br><span class="hljs-meta">$</span><span class="bash"> yum list docker-ce --showduplicates</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 3. 安装特定版本的docker-ce</span><br><span class="hljs-meta">#</span><span class="bash"> 必须指定--<span class="hljs-built_in">setopt</span>=obsoletes=0,否则yum会自动安装更高版本</span><br><span class="hljs-meta">$</span><span class="bash"> yum install --<span class="hljs-built_in">setopt</span>=obsoletes=0 docker-ce-18.06.3.ce-3.el7 -y</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 4. 添加一个配置文件</span><br><span class="hljs-meta">#</span><span class="bash"> docker在默认情况下使用的Cgroup Driver为cgroupfs，而kubernetes推荐使用systemd来代替cgroupfs</span><br><span class="hljs-meta">$</span><span class="bash"> mkdir /etc/docker</span><br><span class="hljs-meta">$</span><span class="bash"> cat &lt;&lt;<span class="hljs-string">EOF&gt; /etc/docker/daemon.json</span></span><br>&#123;<br>&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>&quot;registry-mirrors&quot;:[&quot;https://kn0t2bca.mirror.aliyuncs.com&quot;]<br>&quot;log-driver&quot;: &quot;json-file&quot;,<br>&quot;log-opts&quot;: &#123;<br>&quot;max-size&quot;: &quot;100m&quot;<br>&#125;<br>&#125;<br>EOF<br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> mkdir -p /etc/systemd/system/docker.service.d</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 5. 重启docker服务</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl enable docker</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 6. 检查docker状态和版本</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> docker version</span></span><br></code></pre></td></tr></table></figure><h4 id="2-2-4-安装Kubernetes组件（所有节点都要操作）"><a href="#2-2-4-安装Kubernetes组件（所有节点都要操作）" class="headerlink" title="2.2.4 安装Kubernetes组件（所有节点都要操作）"></a>2.2.4 安装Kubernetes组件（所有节点都要操作）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 由于kubernetes的镜像源在国外，速度比较慢，这里切换成国内的镜像源</span><br><span class="hljs-meta">#</span><span class="bash"> 编辑/etc/yum.repos.d/kubuernetes.repo，添加下面的配置</span><br><span class="hljs-meta">$</span><span class="bash"> cat &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br>[kubernetes]<br>name=Kubernetes<br>baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64<br>enabled=1<br>gpgcheck=0<br>repo_gpgcheck=0<br>gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg<br>       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 安装kubeadm、kubelet和kubectl</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 配置kubelet的cgroup</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 编辑/etc/sysconfig/kubelet,添加下面的配置</span></span><br>KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;<br>KUBE_pROXY_MODE=&quot;ipvs&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 设置kubelet开机自启</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> systemctl enable kubelet</span></span><br></code></pre></td></tr></table></figure><h4 id="2-2-5-准备集群镜像（所有节点都要操作）"><a href="#2-2-5-准备集群镜像（所有节点都要操作）" class="headerlink" title="2.2.5 准备集群镜像（所有节点都要操作）"></a>2.2.5 准备集群镜像（所有节点都要操作）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1. 在安装kubernetes集群之前，必须提前准备好集群需要的镜像，所需镜像可以通过下面命令查看</span><br><span class="hljs-meta">$</span><span class="bash"> kubeadm config images list</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 2. 定义所需镜像的版本</span><br><span class="hljs-meta">#</span><span class="bash"> 此镜像在kubernetes的仓库中，由于网络原因，无法连接，下面提供了一种替代方案</span><br>images=(<br>kube-apiserver:v1.17.4<br>kube-controller-manager:v1.17.4<br>kube-scheduler:v1.17.4<br>kube-proxy:v1.17.4<br>pause:3.1<br>etcd:3.4.3-0<br>coredns:1.6.5<br>)<br><span class="hljs-meta">#</span><span class="bash"> 3. 下载镜像</span><br>for imageName in $&#123;images[@]&#125; ; do<br>docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName<br>docker tag registry.cn-hagnzhou.aliyuncs.com/google_containers/$imageName<br>k8s.gcr.io/$imageName<br>docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName<br>done<br></code></pre></td></tr></table></figure><h4 id="2-2-6-集群初始化"><a href="#2-2-6-集群初始化" class="headerlink" title="2.2.6 集群初始化"></a>2.2.6 集群初始化</h4><p>下面对集群进行初始化，并将node节点加入到集群中</p><ul><li><p>初始化主节点（master节点操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建集群</span><br><span class="hljs-meta">$</span><span class="bash"> kubeadm init \</span><br><span class="bash">--kubernetes-version=v1.17.4 \</span><br><span class="bash">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="bash">--service-cidr=10.96.0.0/12 \</span><br><span class="bash">--apiserver-advertise-address=192.168.109.100 <span class="hljs-comment"># master节点的IP地址</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 执行完上面那段话</span><br><span class="hljs-meta">#</span><span class="bash"> 创建必要文件</span><br><span class="hljs-meta">$</span><span class="bash"> mkdir -p <span class="hljs-variable">$HOME</span>/.kube</span><br><span class="hljs-meta">$</span><span class="bash"> sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="hljs-meta">$</span><span class="bash"> sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config</span><br></code></pre></td></tr></table></figure></li><li><p>加入主节点以及其余工作节点：主节点初始化之后，会出现如图红框所示的一段命令，将这段命令在<strong>node</strong>节点上执行即可</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210813102723.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 检查集群部署情况，发现STATUS是NotReady，是因为还没部署网络</span><br><span class="hljs-meta">$</span><span class="bash"> kubectl get nodes</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-2-7-部署网络"><a href="#2-2-7-部署网络" class="headerlink" title="2.2.7 部署网络"></a>2.2.7 部署网络</h4><p>kubernetes支持多种网络插件，比如flannel、calico、canal等等，任选一种使用即可，本次选用flannel</p><ul><li><p>下面操作只在master节点执行即可，插件使用的是DaemonSet的控制器，它会在每个节点上都运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取flannel的配置文件</span><br><span class="hljs-meta">$</span><span class="bash"> wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 修改kube-flannel文件中quay.io仓库为quay-mirror.qiniu.com</span><br>(如果没有这个文件，可以将本地的修改后的文件上传至master节点)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 使用配置文件启动flannel</span><br><span class="hljs-meta">$</span><span class="bash"> kubectl apply -f kube-flannel.yml</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">  查看集群节点的STATUS变成Ready了</span><br><span class="hljs-meta">$</span><span class="bash"> kubectl get nodes</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-服务部署（master节点操作）"><a href="#2-3-服务部署（master节点操作）" class="headerlink" title="2.3 服务部署（master节点操作）"></a>2.3 服务部署（master节点操作）</h3><p>接下来在kubernetes集群中部署一个nginx程序，测试一下集群是否在正常工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 部署nginx</span><br><span class="hljs-meta">$</span><span class="bash"> kubectl create deployment nginx --image=nginx:1.14-alpine</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 暴露端口</span><br><span class="hljs-meta">$</span><span class="bash"> kubectl expose deployment nginx --port=80 --<span class="hljs-built_in">type</span>=NodePort</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看服务状态</span><br><span class="hljs-meta">$</span><span class="bash"> kubectl get pod,svc</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 最后在浏览器上通过端口号访问部署的nginx服务</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/serein-set/pic/raw/master/20210813105217.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes学习笔记04||实战入门</title>
    <link href="/2021/08/15/chapter04-%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/"/>
    <url>/2021/08/15/chapter04-%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Chapter04-实战入门"><a href="#Chapter04-实战入门" class="headerlink" title="Chapter04 || 实战入门"></a>Chapter04 || 实战入门</h2><ul><li>本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问</li></ul><h3 id="4-1-Namespace"><a href="#4-1-Namespace" class="headerlink" title="4.1 Namespace"></a>4.1 Namespace</h3><ul><li><p>Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现<strong>多套环境的资源隔离</strong>或者<strong>多租户的资源隔离</strong>。</p><ul><li>多套环境的资源隔离：默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的”组”，以方便不同的组的资源进行隔离使用和管理。</li><li>多租户的资源隔离：可以通过kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如CPU使用量、内存使用量等等，来实现租户可用资源的管理。</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210814192445.png"></p></li><li><p>kubernetes在集群启动之后，会默认创建几个namespace</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl  get namespace<br>NAME              STATUS   AGE<br>default           Active   45h     #  所有未指定Namespace的对象都会被分配在default命名空间<br>kube-node-lease   Active   45h     #  集群节点之间的心跳维护，v1.13开始引入<br>kube-public       Active   45h     #  此命名空间下的资源可以被所有人访问（包括未认证用户）<br>kube-system       Active   45h     #  所有由Kubernetes系统创建的资源都处于这个命名空间<br></code></pre></td></tr></table></figure></li><li><p>Namespace资源的具体操作</p><ol><li><p>查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1 查看所有的ns  命令：kubectl get ns</span><br>[root@master ~]# kubectl get ns<br>NAME              STATUS   AGE<br>default           Active   45h<br>kube-node-lease   Active   45h<br>kube-public       Active   45h     <br>kube-system       Active   45h     <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 2 查看指定的ns   命令：kubectl get ns ns名称</span><br>[root@master ~]# kubectl get ns default<br>NAME      STATUS   AGE<br>default   Active   45h<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 3 指定输出格式  命令：kubectl get ns ns名称  -o 格式参数</span><br><span class="hljs-meta">#</span><span class="bash"> kubernetes支持的格式有很多，比较常见的是wide、json、yaml</span><br>[root@master ~]# kubectl get ns default -o yaml<br>apiVersion: v1<br>kind: Namespace<br>metadata:<br>  creationTimestamp: &quot;2021-05-08T04:44:16Z&quot;<br>  name: default<br>  resourceVersion: &quot;151&quot;<br>  selfLink: /api/v1/namespaces/default<br>  uid: 7405f73a-e486-43d4-9db6-145f1409f090<br>spec:<br>  finalizers:<br>  - kubernetes<br>status:<br>  phase: Active<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 4 查看ns详情  命令：kubectl describe ns ns名称</span><br>[root@master ~]# kubectl describe ns default<br>Name:         default<br>Labels:       &lt;none&gt;<br>Annotations:  &lt;none&gt;<br>Status:       Active   # Active 命名空间正在使用中  Terminating 正在删除命名空间<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> ResourceQuota 针对namespace做的资源限制</span><br><span class="hljs-meta">#</span><span class="bash"> LimitRange针对namespace中的每个组件做的资源限制</span><br>No resource quota.<br>No LimitRange resource.<br></code></pre></td></tr></table></figure></li><li><p>创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建namespace</span><br>[root@master ~]# kubectl create ns dev<br>namespace/dev created<br></code></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 删除namespace</span><br>[root@master ~]# kubectl delete ns dev<br>namespace &quot;dev&quot; deleted<br></code></pre></td></tr></table></figure></li><li><p>配置方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首先准备一个yaml文件：ns-dev.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 然后就可以执行对应的创建和删除命令了</span><br>创建：kubectl create -f ns-dev.yaml<br>删除：kubectl delete -f ns-dev.yaml<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="4-2-Pod"><a href="#4-2-Pod" class="headerlink" title="4.2 Pod"></a>4.2 Pod</h3><ul><li>Pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于Pod中。</li><li>Pod可以认为是容器的封装，一个Pod中可以存在一个或者多个容器。</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210814194047.png"></p><ul><li><p>kubernetes在集群启动之后，集群中的各个组件也都是以Pod方式运行的。可以通过下面命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl get pod -n kube-system<br>NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-6955765f44-68g6v         1/1     Running   0          2d1h<br>kube-system   coredns-6955765f44-cs5r8         1/1     Running   0          2d1h<br>kube-system   etcd-master                      1/1     Running   0          2d1h<br>kube-system   kube-apiserver-master            1/1     Running   0          2d1h<br>kube-system   kube-controller-manager-master   1/1     Running   0          2d1h<br>kube-system   kube-flannel-ds-amd64-47r25      1/1     Running   0          2d1h<br>kube-system   kube-flannel-ds-amd64-ls5lh      1/1     Running   0          2d1h<br>kube-system   kube-proxy-685tk                 1/1     Running   0          2d1h<br>kube-system   kube-proxy-87spt                 1/1     Running   0          2d1h<br>kube-system   kube-scheduler-master            1/1     Running   0          2d1h<br></code></pre></td></tr></table></figure></li><li><p>Pod的具体操作</p><ol><li><p>创建并运行：kubernetes没有提供单独运行Pod的命令，都是通过<strong>Pod控制器</strong>来实现的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令格式： kubectl run (pod控制器名称) [参数]</span> <br><span class="hljs-meta">#</span><span class="bash"> --image  指定Pod的镜像</span><br><span class="hljs-meta">#</span><span class="bash"> --port   指定端口</span><br><span class="hljs-meta">#</span><span class="bash"> --namespace  指定运行在哪个namespace中</span><br>[root@master ~]# kubectl run nginx --image=nginx:latest --port=80 --namespace dev <br>deployment.apps/nginx created<br></code></pre></td></tr></table></figure></li><li><p>查看Pod信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看Pod基本信息</span><br>[root@master ~]# kubectl get pods -n dev<br>NAME    READY   STATUS    RESTARTS   AGE<br>nginx   1/1     Running   0          43s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看Pod的详细信息</span><br>[root@master ~]# kubectl describe pod nginx -n dev<br>Name:         nginx<br>Namespace:    dev<br>Priority:     0<br>Node:         node1/192.168.5.4  # 位于哪个节点及其IP<br>Start Time:   Wed, 08 May 2021 09:29:24 +0800<br>Labels:       pod-template-hash=5ff7956ff6<br>              run=nginx<br>Annotations:  &lt;none&gt; <br>Status:       Running  # 启动状态<br>IP:           10.244.1.23 # Pod的IP地址<br>IPs:<br>  IP:           10.244.1.23<br>Controlled By:  ReplicaSet/nginx<br>Containers:<br>  nginx:<br>    Container ID:   docker://4c62b8c0648d2512380f4ffa5da2c99d16e05634979973449c98e9b829f6253c<br>    Image:          nginx:latest<br>    Image ID:       docker-pullable://nginx@sha256:485b610fefec7ff6c463ced9623314a04ed67e3945b9c08d7e53a47f6d108dc7<br>    Port:           80/TCP<br>    Host Port:      0/TCP<br>    State:          Running<br>      Started:      Wed, 08 May 2021 09:30:01 +0800<br>    Ready:          True<br>    Restart Count:  0<br>    Environment:    &lt;none&gt;<br>    Mounts:<br>      /var/run/secrets/kubernetes.io/serviceaccount from default-token-hwvvw (ro)<br>Conditions:<br>  Type              Status<br>  Initialized       True<br>  Ready             True<br>  ContainersReady   True<br>  PodScheduled      True<br>Volumes:<br>  default-token-hwvvw:<br>    Type:        Secret (a volume populated by a Secret)<br>    SecretName:  default-token-hwvvw<br>    Optional:    false<br>QoS Class:       BestEffort<br>Node-Selectors:  &lt;none&gt;<br>Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s<br>                 node.kubernetes.io/unreachable:NoExecute for 300s<br>Events: # 用来排错<br>  Type    Reason     Age        From               Message<br>  ----    ------     ----       ----               -------<br>  Normal  Scheduled  &lt;unknown&gt;  default-scheduler  Successfully assigned dev/nginx-5ff7956ff6-fg2db to node1<br>  Normal  Pulling    4m11s      kubelet, node1     Pulling image &quot;nginx:latest&quot;<br>  Normal  Pulled     3m36s      kubelet, node1     Successfully pulled image &quot;nginx:latest&quot;<br>  Normal  Created    3m36s      kubelet, node1     Created container nginx<br>  Normal  Started    3m36s      kubelet, node1     Started container nginx<br></code></pre></td></tr></table></figure></li><li><p>访问Pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取podIP   -o wide</span><br>[root@master ~]# kubectl get pods -n dev -o wide<br>NAME    READY   STATUS    RESTARTS   AGE    IP             NODE    ... <br>nginx   1/1     Running   0          190s   10.244.1.23   node1   ...<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注：PodIP地址会随着Pod的重新创建而变化</span><br><span class="hljs-meta">#</span><span class="bash">访问Pod</span><br>[root@master ~]# curl http://10.244.1.23:80<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>删除指定Pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 删除指定Pod</span><br>[root@master ~]# kubectl delete pod nginx -n dev<br>pod &quot;nginx&quot; deleted<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 此时，显示删除Pod成功，但是再查询，发现又新产生了一个</span> <br>[root@master ~]# kubectl get pods -n dev<br>NAME    READY   STATUS    RESTARTS   AGE<br>nginx   1/1     Running   0          21s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这是因为当前Pod是由Pod控制器创建的，控制器会监控Pod状况，一旦发现Pod死亡，会立即重建</span><br><span class="hljs-meta">#</span><span class="bash"> 此时要想删除Pod，必须删除Pod控制器</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 先来查询一下当前namespace下的Pod控制器</span><br>[root@master ~]# kubectl get deploy -n  dev<br>NAME    READY   UP-TO-DATE   AVAILABLE   AGE<br>nginx   1/1     1            1           9m7s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 接下来，删除此PodPod控制器</span><br>[root@master ~]# kubectl delete deploy nginx -n dev<br>deployment.apps &quot;nginx&quot; deleted<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 稍等片刻，再查询Pod，发现Pod被删除了</span><br>[root@master ~]# kubectl get pods -n dev<br>No resources found in dev namespace.<br></code></pre></td></tr></table></figure></li><li><p>配置操作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 创建一个pod-nginx.yaml，内容如下:</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># Pod名称，并非Pod控制器</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-port</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 然后就可以执行对应的创建和删除命令了：</span><br>创建：kubectl create -f pod-nginx.yaml<br>删除：kubectl delete -f pod-nginx.yaml<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="4-3-Label"><a href="#4-3-Label" class="headerlink" title="4.3 Label"></a>4.3 Label</h3><ul><li><p>Label是kubernetes系统中的一个重要概念。它的作用就是在资源上添加标识，用来对它们进行区分和选择。</p></li><li><p>Label的特点：</p><ul><li>一个Label会以key/value键值对的形式附加到各种对象上，如Node、Pod、Service等等</li><li>一个资源对象可以定义任意数量的Label ，同一个Label也可以被添加到任意数量的资源对象上去</li><li>Label通常在资源对象定义时确定，当然也可以在对象创建后动态添加或者删除</li></ul></li><li><p>可以通过Label实现资源的多维度分组，以便灵活、方便地进行资源分配、调度、配置、部署等管理工作。</p></li></ul><blockquote><p>一些常用的Label 示例如下：</p><ul><li>版本标签：”version”:”release”, “version”:”stable”……</li><li>环境标签：”environment”:”dev”，”environment”:”test”，”environment”:”pro”</li><li>架构标签：”tier”:”frontend”，”tier”:”backend”</li></ul></blockquote><blockquote><p>标签定义完毕之后，还要考虑到标签的选择，这就要使用到Label Selector，即：</p><p>​    - Label用于给某个资源对象定义标识</p><p>​    - Label Selector用于查询和筛选拥有某些标签的资源对象</p></blockquote><ul><li><p>当前有两种Label Selector：</p><ul><li>基于等式的Label Selector<ul><li>name = slave: 选择所有包含Label中key=”name”且value=”slave”的对象</li><li>env != production: 选择所有包括Label中的key=”env”且value不等于”production”的对象</li></ul></li><li>基于集合的Label Selector<ul><li>name in (master, slave): 选择所有包含Label中的key=”name”且value=”master”或”slave”的对象</li><li>name not in (frontend): 选择所有包含Label中的key=”name”且value不等于”frontend”的对象</li></ul></li></ul></li><li><p>标签的选择条件可以使用多个，此时将多个Label Selector进行组合，使用逗号”,”进行分隔即可。例如：</p><ul><li>name=slave，env!=production</li><li>name not in (frontend)，env!=production</li></ul></li><li><p>命令方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 为pod资源打标签</span><br>[root@master ~]# kubectl label pod nginx-pod version=1.0 -n dev<br>pod/nginx-pod labeled<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 为pod资源更新标签 --overwrite</span><br>[root@master ~]# kubectl label pod nginx-pod version=2.0 -n dev --overwrite<br>pod/nginx-pod labeled<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看标签 --show-labels</span><br>[root@master ~]# kubectl get pod nginx-pod  -n dev --show-labels<br>NAME        READY   STATUS    RESTARTS   AGE   LABELS<br>nginx-pod   1/1     Running   0          10m   version=2.0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 筛选标签 -l 标签名</span><br>[root@master ~]# kubectl get pod -n dev -l version=2.0  --show-labels<br>NAME        READY   STATUS    RESTARTS   AGE   LABELS<br>nginx-pod   1/1     Running   0          17m   version=2.0<br>[root@master ~]# kubectl get pod -n dev -l version!=2.0 --show-labels<br>No resources found in dev namespace.<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">删除标签 标签名-</span><br>[root@master ~]# kubectl label pod nginx-pod version- -n dev <br>pod/nginx-pod labeled<br></code></pre></td></tr></table></figure></li><li><p>配置方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">labels:</span>  <span class="hljs-comment"># 标签</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.0&quot;</span> <br>    <span class="hljs-attr">env:</span> <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">pod</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-port</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><ul><li>然后就可以执行对应的更新命令了：kubectl apply -f pod-nginx.yaml</li></ul></li></ul><h3 id="4-4-Deployment"><a href="#4-4-Deployment" class="headerlink" title="4.4 Deployment"></a>4.4 Deployment</h3><ul><li>在kubernetes中，Pod是最小的控制单元，但是kubernetes很少直接控制Pod，一般都是通过Pod控制器来完成的。Pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障时，会尝试进行重启或重建pod。</li><li>在kubernetes中Pod控制器的种类有很多，本章节只介绍一种：Deployment。</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210815090352.png"></p><ul><li><p>命令操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令格式: kubectl create deployment 名称  [参数]</span> <br><span class="hljs-meta">#</span><span class="bash"> --image  指定pod的镜像</span><br><span class="hljs-meta">#</span><span class="bash"> --port   指定端口</span><br><span class="hljs-meta">#</span><span class="bash"> --replicas  指定创建pod数量</span><br><span class="hljs-meta">#</span><span class="bash"> --namespace  指定namespace</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl create deploy nginx --image=nginx:latest --port=80 --replicas=3 -n dev<br>deployment.apps/nginx created<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看创建的Pod</span><br>[root@master ~]# kubectl get pods -n dev<br>NAME                     READY   STATUS    RESTARTS   AGE<br>nginx-5ff7956ff6-6k8cb   1/1     Running   0          19s<br>nginx-5ff7956ff6-jxfjt   1/1     Running   0          19s<br>nginx-5ff7956ff6-v6jqw   1/1     Running   0          19s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看deployment的信息</span><br>[root@master ~]# kubectl get deploy -n dev<br>NAME    READY   UP-TO-DATE   AVAILABLE   AGE<br>nginx   3/3     3            3           2m42s<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> UP-TO-DATE：成功升级的副本数量</span><br><span class="hljs-meta">#</span><span class="bash"> AVAILABLE：可用副本的数量</span><br>[root@master ~]# kubectl get deploy -n dev -o wide<br>NAME    READY UP-TO-DATE  AVAILABLE   AGE     CONTAINERS   IMAGES              SELECTOR<br>nginx   3/3     3         3           2m51s   nginx        nginx:latest        run=nginx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看deployment的详细信息</span><br>[root@master ~]# kubectl describe deploy nginx -n dev<br>Name:                   nginx<br>Namespace:              dev<br>CreationTimestamp:      Wed, 08 May 2021 11:14:14 +0800<br>Labels:                 run=nginx<br>Annotations:            deployment.kubernetes.io/revision: 1<br>Selector:               run=nginx  # 标签选择器<br>Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable<br>StrategyType:           RollingUpdate<br>MinReadySeconds:        0<br>RollingUpdateStrategy:  25% max unavailable, 25% max surge<br>Pod Template:<br>  Labels:  run=nginx<br>  Containers:<br>   nginx:<br>    Image:        nginx:latest<br>    Port:         80/TCP<br>    Host Port:    0/TCP<br>    Environment:  &lt;none&gt;<br>    Mounts:       &lt;none&gt;<br>  Volumes:        &lt;none&gt;<br>Conditions:<br>  Type           Status  Reason<br>  ----           ------  ------<br>  Available      True    MinimumReplicasAvailable<br>  Progressing    True    NewReplicaSetAvailable<br>OldReplicaSets:  &lt;none&gt;<br>NewReplicaSet:   nginx-5ff7956ff6 (3/3 replicas created)<br>Events:<br>  Type    Reason             Age    From                   Message<br>  ----    ------             ----   ----                   -------<br>  Normal  ScalingReplicaSet  5m43s  deployment-controller  Scaled up replicaset nginx-5ff7956ff6 to 3<br><span class="hljs-meta">  </span><br><span class="hljs-meta">#</span><span class="bash"> 删除</span> <br>[root@master ~]# kubectl delete deploy nginx -n dev<br>deployment.apps &quot;nginx&quot; deleted<br></code></pre></td></tr></table></figure></li><li><p>配置操作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 创建一个deploy-nginx.yaml，内容如下：</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span> <br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span>     <span class="hljs-comment"># Pod控制器名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">dev</span>  <span class="hljs-comment"># Pod控制器所属命名空间</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span> <br>  <span class="hljs-attr">selector:</span>  <span class="hljs-comment"># 标签选择器</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span>  <span class="hljs-comment"># Pod模板的相关信息</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">nginx</span> <span class="hljs-comment"># 定义标签</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 然后就可以执行对应的创建和删除命令了：</span><br>创建：kubectl create -f deploy-nginx.yaml<br>删除：kubectl delete -f deploy-nginx.yaml<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-5-Service"><a href="#4-5-Service" class="headerlink" title="4.5 Service"></a>4.5 Service</h3><p>虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两问题：</p><ul><li>Pod IP 会随着Pod的重建产生变化</li><li>Pod IP 仅仅是集群内可见的虚拟IP，外部无法访问</li></ul><p>这样对于访问这个服务带来了难度。因此，kubernetes设计了Service来解决这个问题。</p><p>Service可以看作是一组同类Pod<strong>对外的访问接口</strong>。借助Service，应用可以方便地实现服务发现和负载均衡。</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210815092220.png"></p><ul><li><p><strong>操作一：创建集群内部可访问的Service</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 暴露Service : Service 去指定Deployment管理的哪些Pod</span><br>[root@master ~]# kubectl expose deploy nginx --name=svc-nginx1 --type=ClusterIP --port=80 --target-port=80 -n dev<br>service/svc-nginx1 exposed<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看service</span><br>[root@master ~]# kubectl get svc svc-nginx1 -n dev -o wide<br>NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE     SELECTOR<br>svc-nginx1   ClusterIP   10.109.179.231   &lt;none&gt;        80/TCP    3m51s   run=nginx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这里产生了一个CLUSTER-IP，这就是service的IP，在Service的生命周期中，这个地址是不会变动的</span><br><span class="hljs-meta">#</span><span class="bash"> 可以通过这个IP访问当前service对应的POD。这个CLUSTER-IP只能在集群内部访问</span><br>[root@master ~]# curl 10.109.179.231:80<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>.......<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>操作二：创建集群外部也可访问的Service</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 上面创建的Service的<span class="hljs-built_in">type</span>类型为ClusterIP，这个ip地址只用集群内部可访问</span><br><span class="hljs-meta">#</span><span class="bash"> 如果需要创建外部也可以访问的Service，需要修改<span class="hljs-built_in">type</span>为NodePort</span><br>[root@master ~]# kubectl expose deploy nginx --name=svc-nginx2 --type=NodePort --port=80 --target-port=80 -n dev<br>service/svc-nginx2 exposed<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 此时查看，会发现出现了NodePort类型的Service，而且有一对Port（80:31928/TC）</span><br>[root@master ~]# kubectl get svc  svc-nginx2  -n dev -o wide<br>NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE    SELECTOR<br>svc-nginx2    NodePort    10.100.94.0      &lt;none&gt;        80:31928/TCP   9s     run=nginx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 接下来就可以通过集群外的主机访问 节点IP:31928访问服务了</span><br><span class="hljs-meta">#</span><span class="bash"> 例如在的电脑主机上通过浏览器访问下面的地址</span><br>http://192.168.5.4:31928/<br></code></pre></td></tr></table></figure></li><li><p><strong>删除Service</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl delete svc svc-nginx-1 -n dev                               <br>service &quot;svc-nginx-1&quot; deleted<br></code></pre></td></tr></table></figure></li><li><p><strong>配置方式</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 创建一个svc-nginx.yaml，内容如下</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-nginx</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.109</span><span class="hljs-number">.179</span><span class="hljs-number">.231</span> <span class="hljs-comment">#固定svc的内网ip 可不写，不写就自动分配</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 然后就可以执行对应的创建和删除命令了：</span><br>创建：kubectl create -f svc-nginx.yaml<br>删除：kubectl delete -f svc-nginx.yaml<br></code></pre></td></tr></table></figure></li></ul><blockquote><p><strong>小结</strong></p><p>至此，已经掌握了Namespace、Pod、Deployment、Service资源的基本操作，有了这些操作，就可以在kubernetes集群中实现一个服务的简单部署和访问了，但是如果想要更好的使用kubernetes，就需要深入学习这几种资源的细节和原理。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EdgeFed:Optimized Federated Learning Based on Edge Computing</title>
    <link href="/2021/07/23/PaperList-04/"/>
    <url>/2021/07/23/PaperList-04/</url>
    
    <content type="html"><![CDATA[<p>提出了基于边缘计算的FL优化算法，以解决移动设备执行FedAvg时计算成本大的问题</p><span id="more"></span><h4 id="研究主题"><a href="#研究主题" class="headerlink" title="研究主题"></a><code>研究主题</code></h4><ul><li><strong>DOI：10.1109/ACCESS.2020.3038287</strong></li></ul><h5 id="1-研究主题"><a href="#1-研究主题" class="headerlink" title="1. 研究主题"></a>1. 研究主题</h5><ul><li><p>为了减少设备的计算成本和全局的通信成本，提出EdgeFed 边缘联邦学习框架，将部分计算从移动客户端卸载到边缘服务器，提高模型训练学习的效率。</p></li><li><p>模型更新</p><ul><li>移动设备和边缘服务器共同完成的过程</li><li>边缘服务器和中心服务器共同完成的过程</li></ul></li><li><p>在不同带宽条件下选择关键参数值时的权衡原则</p></li></ul><h5 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2. 关键技术"></a>2. 关键技术</h5><ul><li>合作式本地更新算法–解决移动设备的高计算成本问题</li><li>全局聚合算法</li></ul><h5 id="3-创新点"><a href="#3-创新点" class="headerlink" title="3. 创新点"></a>3. 创新点</h5><p>以往的分层FL的工作更多地关注于各种移动设备与边缘服务器之间的交互，而在本文提出的EdgeFed中，模型训练的过程被分为两部分。在移动设备中学习低层模型参数，在边缘服务器中学习高层模型参数，并研究关键参数的后续影响。</p><h5 id="4-相关问题"><a href="#4-相关问题" class="headerlink" title="4. 相关问题"></a>4. 相关问题</h5><ol><li>怎样确定训练多少轮后边缘服务器和中央服务器进行参数共享？</li></ol><h4 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a><code>研究方法</code></h4><h5 id="1-系统架构"><a href="#1-系统架构" class="headerlink" title="1. 系统架构"></a>1. 系统架构</h5><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723132955.png"></p><ul><li><p>优化算法的每次迭代</p><ul><li>K个边缘设备和相应的边缘服务器之间的多次分割训练</li><li>以及m个边缘服务器和中央服务器之间的全局聚合</li></ul></li><li><p>模型训练更新过程</p><ol><li><p>在训练之前，中央服务器将向多个边缘服务器发送<strong>初始模型参数</strong>，而每个边缘<strong>设备</strong>将从分配的边缘服务器<strong>下载这些参数</strong>。</p></li><li><p>边缘设备k<strong>处理原始数据</strong>：卷积+池化，用模型低层的本地数据进行<strong>计算</strong>，并将数据<strong>发送</strong>至边缘服务器</p></li><li><p>在收到所有边缘设备的低层输出后，边缘服务器m进行计算更新，将更新后的模型参数<strong>返回</strong>给边缘设备。</p></li><li><p>在边缘设备和边缘服务器之间进行多次分割训练后，边缘服务器m会将更新的模型参数<strong>发送</strong>到中心服务器进行加权平均计算，得到全局汇总的更新参数，并将其返回给边缘服务器进行下一次迭代。</p></li></ol></li></ul><h5 id="2-关键算法"><a href="#2-关键算法" class="headerlink" title="2. 关键算法"></a>2. 关键算法</h5><ol><li><p>协作式本地更新算法–边缘服务器</p><ul><li>解决移动设备的高计算成本问题：获得初始模型参数后，在边缘服务器和移动设备之间进行</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723142212.png"></p><ul><li>如算法1第17-24行所示，在获取初始模型参数后，移动设备将开始将本地数据划分为若干固定大小的批次，进行SGD。在每批处理中，移动设备底层的输出和相应的数据标签将被传输到边缘服务器进行聚合。在合作局部更新过程中，每批更新的过程都需要移动设备与边缘服务器进行通信。</li></ul></li><li><p>全局聚合算法–中心服务器</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723142324.png"></p><ul><li>在一次全局聚合的迭代之后，中央服务器需要确定是否有必要继续进行FL。云数据中心的测试数据集可用于测试模型。如果表现理想，那么就不需要开始下一次迭代，以避免可能的过度拟合和额外的计算；而如果表现不能满足标准，中心服务器就可以重复整个过程，将模型参数分配给边缘服务器进行下一轮。</li></ul></li><li><p>移动设备与边缘服务器之间所需的本地通信次数分析</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723144746.png"></p><ul><li>Dk：移动设备k中的本地数据量。sbatch：批大小。tbatch：通信次数</li><li>分析<ul><li>当t过大时，意味着移动设备和边缘服务器之间有太多的通信，尽管有高带宽和低延迟，但由于网络的不稳定性，协作性本地更新的过程可能会受到影响。</li><li>一个小的sbatch会增加所需的本地通信次数，而一个大的sbatch则可能影响模型训练的收敛。</li><li>在本地协作更新的过程中，边缘服务器的聚合是同步的，即边缘服务器需要等待所有参与的移动设备完成低层的计算。因此，移动设备和边缘服务器之间的所有本地通信时间t的数量应该是相同的。</li></ul></li></ul></li><li><p>移动设备与边缘服务器之间本地所需的总通信次数分析</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723150114.png"></p><ul><li>E：本地轮数</li><li>当E过大时，本地通信次数总数会增加。有必要权衡E和sbatch的值。根据实际应用，我们可以在可接受的tlocal的前提下，尽可能合理地减少sbatch，增加E，以便更好更快地训练模型</li></ul></li></ol><h4 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a><code>实验结论</code></h4><h5 id="1-实验设计"><a href="#1-实验设计" class="headerlink" title="1. 实验设计"></a>1. 实验设计</h5><ul><li><p>数据集：MNIST </p></li><li><p>客户端的数据集是non-IID的</p></li><li><p>随机梯度下降法–SGD</p></li><li><p>假设：每个边缘服务器授权相同数量的客户端具有相同数量的训练数据</p></li><li><p>学习模型–CNN</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723152434.png"></p><ul><li>两个卷积层Conv：分别有32和64个大小为5×5的过滤器。</li><li>激活函数：Relu</li><li>两个池化层Pooling：大小为2×2</li><li>全连接层FC：10个节点</li></ul></li><li><p><strong>FedAvg</strong></p><ul><li><p>设备数量100个客户端和1个中心服务器</p></li><li><p>在一次迭代中，从中心服务器下载初始模型参数后，100个移动设备在本地训练模型，每个移动设备将本地更新的模型参数同步发送到中心服务器进行全局聚合</p></li><li><p>首先将所有的训练数据按照每张图片的标签进行有序排序，然后将60000张图片分成200块，随机分配给每个客户端2块</p></li></ul></li><li><p><strong>EdgeFed</strong></p><ul><li><p>设备数量：100个移动设备、10个边缘服务器和一个中央服务器</p></li><li><p>在一次迭代中，从中央服务器下载初始模型参数后，10个边缘服务器将参数分发给分配的移动设备，每个边缘服务器与10个移动设备协作</p></li><li><p>每个批次的训练过程从移动设备对低层的计算开始，输出结果将被发送到相应的边缘服务器进行汇总并计算后续层，然后将边缘服务器中更新的模型参数返回给移动设备用于下一批次。在移动设备和边缘服务器之间完成多次协作的本地更新后，每个边缘服务器将本地参数发送到中心服务器进行全局聚合，这里是一个通信回合的结束。</p></li><li><p>为每个边缘服务器随机选择6000张图片，并根据标签进行有序排序，然后将它们分成20块，每个被分配的客户端得到2块。因此，每个移动设备有600个训练数据，其中只有部分类别的标签</p></li></ul></li></ul><h5 id="2-结果分析"><a href="#2-结果分析" class="headerlink" title="2. 结果分析"></a>2. 结果分析</h5><ul><li><p>影响因素：<strong>batch size</strong>和<strong>epochs</strong>影响 训练效率 和 移动设备的计算成本。</p></li><li><p><strong>FedAvg和EdgeFed的准确性和训练损失比较</strong></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723153848.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723155200.png"></p><ul><li><p>结论</p><ul><li><p>EdgeFed可以在较少的全局通信次数的情况下更快地实现更好的训练性能</p></li><li><p>在相同的batch size和epochs下，EdgeFed对移动设备的计算成本要求比FedAvg低</p></li><li><p>EdgeFed的局部更新过程由移动设备和边缘服务器协同完成，移动设备应该在每批训练中与边缘服务器进行通信，将低层计算的结果上传到边缘服务器进行汇总，并下载更新的高层模型参数。因此，E<strong>dgeFed的每一批模型更新都会带来额外的通信成本</strong>。</p></li></ul></li></ul></li><li><p><strong>FedAvg和EdgeFed的总通信成本比较</strong></p><ul><li>假设<ul><li>移动设备与边缘服务器之间的数据传输速率为6MB/s ~ 10MB/s</li><li>客户端/边缘与中心服务器之间的数据传输速率为1MB/s ~ 5MB/s</li></ul></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723155616.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723160104.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210723161609.png"></p><ul><li>结论<ul><li>如果目标是最小化总通信成本，我们应该根据不同的带宽条件，通过调整sbatch和E来仔细平衡batch size和epochs。</li><li>在EdgeFed中，为了达到一定的模型精度，需要<strong>更少的全局聚合</strong>，移动设备只需要训练底层的参数，而更多的数据处理和权值更新则被转移到边缘服务器。从而大大降低了计算量的需求，避免了移动设备上不必要的能源消耗和资源占用。</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Edge computing</tag>
      
      <tag>Federated learning</tag>
      
      <tag>Deep learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Federated Transfer Learning for IIoT Devices With Low Computing Power Based on Blockchain and Edge Computing</title>
    <link href="/2021/07/20/PaperList-03/"/>
    <url>/2021/07/20/PaperList-03/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="研究主题"><a href="#研究主题" class="headerlink" title="研究主题"></a><code>研究主题</code></h4><ul><li><strong>DOI：10.1109/ACCESS.2021.3095078</strong></li></ul><h5 id="1-研究主题"><a href="#1-研究主题" class="headerlink" title="1. 研究主题"></a>1. 研究主题</h5><ul><li><p>需要解决的问题：针对工业物联网设备太低而无法完成联邦学习中模型更新任务的问题。</p></li><li><p>创新点</p><ul><li>针对许多计算能力低下的设备不适合在IIoT中进行联合学习的问题，本文提出了一种将低计算能力设备的数据提交给工厂内网的边缘计算服务器进行训练的策略。</li><li>针对数据传输过程中存在的数据安全问题，本文采用区块链来保护数据的安全</li><li>在工业物联网环境下将联邦学习和迁移学习相结合，以提高训练模型的泛化程度</li></ul></li></ul><h5 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2. 关键技术"></a>2. 关键技术</h5><ul><li><p>联邦学习– 保护用户隐私</p></li><li><p>边缘计算–解决设备计算能力不足的问题</p></li><li><p>区块链–保证数据传输的安全性，进行设备认证</p></li><li><p>联邦迁移学习–提高训练模型的效率和通用性</p></li></ul><h5 id="3-相关问题"><a href="#3-相关问题" class="headerlink" title="3. 相关问题"></a>3. 相关问题</h5><ol><li>迁移学习的准确率能再提高吗？</li><li>数据传输的加解密消耗过多资源问题怎么解决？</li></ol><h4 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a><code>研究方法</code></h4><ul><li>基于区块链的设备身份认证：提出一种工业物联网中的安全传输方案，采用区块链去中心化架构，连续记录进出节点的传输数据，确保数据的安全性。该方案可实现工业物联网设备的身份认证和数据的安全传输，为联邦学习和边缘计算中设备间的数据共享创造条件。</li></ul><ul><li><p>边缘计算：本文提出将物联网中低计算能力设备的数据传输到边缘计算设备上进行训练和更新。该方案提高了联合学习的效率，为IIoT中的联合学习创造了良好的条件。</p></li><li><p>联邦迁移学习：针对工业物联网中性能较低的设备提出了一种合适的联邦迁移学习方法</p></li></ul><h5 id="1-系统设计"><a href="#1-系统设计" class="headerlink" title="1. 系统设计"></a>1. 系统设计</h5><ol><li><p>基于区块链的设备身份认证</p><ol><li><p>区块链系统架构</p><ul><li><p>组成：IIoT设备、边缘服务器和云服务器组成的区块网络。</p></li><li><p>物联网设备节点不承担数据计算工作，我们让现有的云服务器作为创建节点。</p></li><li><p>共识算法：Ripple算法</p></li><li><p>当一个节点发起申请时，验证节点将验证该节点的身份，如果验证通过则签名。当整个区块链系统的签名数不低于当前区块链系统汇总数的51%时，当前区块链系统认为该节点已通过区块链系统的审核。否则这个请求将被丢弃。</p></li><li><p>交易：包括设备类型、数据内容、数据、数据生成时间、处理节点和处理节点签名</p></li></ul></li><li><p>身份验证过程</p><ul><li>IIoT设备认证方案：集中式密钥分发改进方案，其主要功能是数字证书的颁发和管理。</li><li>利用云服务器作为密钥分发中心，通过协商机制对密钥进行分发和管理。</li><li>举例：注册<ol><li>首先，物联网设备向云服务器申请注册</li><li>云服务器通过共识机制检查物联网设备的身份</li><li>审批通过后，云服务器将生成包含当前设备公钥的数字证书，并将其记录到自己的账簿中。</li><li>然后云服务器将设备的信息发送到区块链中的其他节点。</li><li>其他节点只需要验证证书的有效性，就可以知道当前记录的有效性。</li><li>验证后，其他节点将记录在各自的账簿中</li></ol></li></ul></li></ol></li><li><p>边缘计算</p><ul><li><p>目的：解决IIoT中计算能力的不足的问题</p></li><li><p>过程：</p><ol><li><p>当需要训练时，设备将自己的<strong>数据</strong>和自己的<strong>设备编号</strong>  <strong>分批上传</strong> 到每个厂内配备的边缘服务器。</p></li><li><p>边缘服务器使用Quicksort对所有数据进行<strong>排序</strong>，对排序后的数据进行<strong>比较</strong>，并<strong>删除重复的数据</strong>。</p></li><li><p>在边缘服务器对设备传输的数据进行<strong>训练</strong>后，边缘服务器将把当前工厂中<strong>同类型设备</strong>的模型<strong>合并为一个模型进行训练</strong>。</p><ul><li><p>边缘计算设备位于工厂内网中，以确保数据的隐私和安全</p></li><li><p>对工厂内同类型设备的模型进行合并更新后，可以大大减少对公共网络带宽的占用，提高联邦学习的效率。</p></li></ul></li><li><p>最后，合并后的训练模型被<strong>上传到云服务器</strong>，云服务器返回的模型被<strong>分发到各设备</strong>。</p></li></ol></li></ul></li><li><p>联邦迁移学习模型</p><ul><li>无监督领域自适应训练的过程通常分为两部分：预训练和微调。<ol><li>首先，在源域对特征提取器和分类器进行预训练</li><li>然后，源域将特征提取器的权重发送给目标域，并为两者之间的合作微调阶段做准备。</li><li>在微调阶段，每批数据的处理可以分为四个步骤：前馈、分类损失函数和梯度计算、MMD损失函数和梯度计算、模型参数更新。</li></ol></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720202324.png"></p></li></ol><h4 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a><code>实验结论</code></h4><ul><li>实验目的：验证区块链认证系统的安全性、联邦学习的准确性和迁移学习的准确性</li></ul><ol><li><p>基于区块链的设备身份认证实验</p><ol><li><p>网络流量测试</p><ul><li>目的：测试该协议与未经认证的无线接入点之间的网络流量的差异，从而测量协议造成的网络流量压力的增加</li><li>测试方法：使用 iftop 对网络流量进行测试，将直接发送到区块链的查询请求与本协议认证的请求流量进行比较，不断改变每秒查询次数（QPS），计算出网络流量利用率。</li><li>为了及时响应请求，更准确地测量对网络的影响，随机选择的服务节点的数量为1，在这种情况下，不需要运行共识协议。</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720210513.png"></p><ul><li>结论：该方案对网络流量的影响为千分之一，对程序网络性能的影响可以忽略不计</li></ul></li><li><p>安全分析</p><ul><li><strong>伪装攻击测试</strong>：使用与用户地址不匹配的私钥对数据包进行签名，然后发送到无线接入点。接入点成功丢弃报文</li><li><strong>伪造攻击测试</strong>：对于中间人和未经认证的攻击，该解决方案依靠数字签名技术，在所有阶段都能有效防止。由于攻击者不能通过共识认证，他不能加入区块链，更不用说创建请求交易了。</li><li><strong>重放攻击测试</strong>：同一个数据包被发送到无线接入点两次，无线接入点只向区块链发出一次请求。</li><li><strong>拒绝服务攻击</strong>：本文提出的算法可以保证用户和无线接入点不能操纵参与协商验证的节点，从而保证验证流量不能集中在少数节点上，并在一定程度上限制拒绝服务攻击</li></ul></li></ol></li><li><p>联邦学习的实验</p><ul><li><p>数据集：KDD99数据集</p></li><li><p>实验设置：四个终端和一个云服务器，每个终端有10%的随机抽取的KDD99数据，保证了四个终端存储的数据基本不同</p></li><li><p>对照试验：本文算法与CSE、GRAE和FedAvg进行比较</p></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720212655.png"></p><ul><li>结论：<ul><li>对于KDD99数据集：本文提出的联邦学习方法在所有学习类型中表现最好。这主要是由于一般集中学习方法不能很好地更新模型，受限于有限的训练数据集，不能产生良好的效果。另一方面，标准联邦学习方法在本文描述的环境中受到设备有限计算能力的限制，可能会对模型产生负面影响，影响模型的准确性</li></ul></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720213828.png"></p><ul><li>结论：<ul><li>本文提出的联合学习算法比其他算法具有更高的准确率。验证了低计算功率设备在工业物联网中参与联邦学习的可行性</li></ul></li></ul></li><li><p>迁移学习实验</p><ul><li>数据集：KDD99数据集</li><li>实验设置：每个设备设置了不同的数据集。将10%的KDD99数据集划分为五个部分:Normal、DOS、Probe、R2L和U2R，并将它们放在不同的节点上。</li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720214332.png"></p><ul><li>结论：本文提出的算法取得了较好的迁移学习准确率</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Federated Transfer Learning</tag>
      
      <tag>Edge computing</tag>
      
      <tag>Blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FedHealth:A Federated Transfer Learning Framework for Wearable Healthcare</title>
    <link href="/2021/07/19/PaperList-02/"/>
    <url>/2021/07/19/PaperList-02/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="研究主题"><a href="#研究主题" class="headerlink" title="研究主题"></a><code>研究主题</code></h4><ul><li><strong>DOI：10.1109/MIS.2020.2988604</strong></li></ul><h5 id="1-研究主题"><a href="#1-研究主题" class="headerlink" title="1. 研究主题"></a>1. 研究主题</h5><ul><li><p>为了解决数据孤岛和个性化模型训练问题，提出了一个联邦迁移学习框架FedHealth用于可穿戴医疗保健。</p></li><li><p>创新点</p></li><li><ul><li><p>第一个将联邦迁移学习用于可穿戴健康的工作</p></li><li><p>保障隐私安全的情况下聚合数据</p></li><li><p>实现相对个性化的模型学习</p></li></ul></li></ul><h5 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2. 关键技术"></a>2. 关键技术</h5><ul><li>联邦学习–解决数据孤岛问题</li><li>迁移学习–解决个性化模型学习问题<ul><li>其他方法：<strong>增量学习</strong>能够随着时间、环境和用户的逐渐变化而更新模型。与侧重于模型适应的迁移学习相比，增量学习使在新用户数据到达时无需大量计算就可以实时更新模型成为可能</li></ul></li></ul><h5 id="3-相关问题"><a href="#3-相关问题" class="headerlink" title="3. 相关问题"></a>3. 相关问题</h5><ol><li>在什么阶段聚合？更新的频率和大小是多少？</li><li>如何提高计算效率？</li><li>模型更新聚合的开销十分消耗资源该怎么解决？</li><li>每次模型聚合的延迟如何？</li></ol><h4 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a><code>研究方法</code></h4><p>​    <img src="https://gitee.com/serein-set/pic/raw/master/20210720101821.png" alt="image-20210720101821486"/></p><ul><li><p>FedHealth工作过程</p><ol><li><p>首先，服务器端的云模型是基于公共数据集训练的</p></li><li><p>然后，云模型被分发到所有的用户，每个人都可以在他们的数据上训练自己的模型。</p></li><li><p>随后，用户模型可以被上传到云端，以帮助训练新的云模型。</p><ul><li><strong>注</strong>：这一步<strong>不会分享任何用户数据或信息</strong>，而是分享加密的模型参数</li></ul></li><li><p>最后，每个用户可以通过整合云模型和其以前的模型和数据来训练个性化的模型–迁移学习</p></li></ol><ul><li><strong>注</strong>：同态加密保证了所有的参数共享过程都不涉及任何用户数据的泄露</li></ul></li></ul><h5 id="1-FeaHealth学习算法"><a href="#1-FeaHealth学习算法" class="headerlink" title="1. FeaHealth学习算法"></a>1. FeaHealth学习算法</h5><ul><li><p>关键部分：云和用户模型学习</p></li><li><p>迁移学习过程</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720103022.png"></p><ul><li><p>参数共享时如何提高计算效率？</p><ul><li>对于聚合，服务器可以随后将旧模型与来自每个用户的模型对齐。</li><li>服务器也可以通过上传用户模型实现定时更新</li></ul></li><li><p>如何解决个性化问题？</p><ul><li><p>一般模型的泛化性能差：原因是用户和云数据之间的分布差异造成的。服务器中的公共模型只学习所有用户的粗特征，而不能学习特定用户的细粒度信息</p></li><li><p>解决办法：Federhealth使用迁移学习为每个用户构建个性化模型–CNN</p></li></ul></li></ul></li><li><p>CNN模型</p><ul><li><p>构成</p><ul><li>两个卷积层(conv1,  conv2) : 提取活动识别的低级特征</li><li>两个最大池层(pool1,  pool2)<ul><li>卷积层和最大池层在反向传播中<strong>不更新</strong>参数</li></ul></li><li>两个全连接层(fc1,  fc2) : 学习任务和用户的具体特征<ul><li>通过将fc2替换为<strong>对齐层</strong>，<strong>FedHealth可以调整来自不同域的输入</strong></li><li>在训练中需要<strong>更新</strong>的参数</li></ul></li><li>一个用于分类的softmax层</li></ul></li><li><p>此处的模型用于人类活动识别</p><ul><li>输入数据是用户的活动信号</li><li>输出是用户的活动类</li></ul></li></ul></li></ul><ul><li><p>FedHealth 学习算法</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720102920.png"></p><ul><li><p>相关公式</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720103323.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720103348.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720103403.png"></p></li><li><p>注 : 这个框架不断地与新出现的用户数据一起工作。当面对新的用户数据时，federhealth可以同时更新用户模型和云模型。因此，用户使用产品的时间越长，模型就可以越个性化</p></li></ul></li></ul><h4 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a><code>实验结论</code></h4><p>​    <img src="https://gitee.com/serein-set/pic/raw/master/20210720112601.png"></p><p>​    <img src="https://gitee.com/serein-set/pic/raw/master/20210720112235.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720112304.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720112423.png"></p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210720112631.png"></p><ul><li><p>结论</p><ul><li><p>Extensibility With Alternative Transfer Learning Methods:在大多数情况下，Federhealth使用调优或MMD都可以取得令人满意的结果，这表明FedHealth在实际应用中与其他传输学习算法是有效的和可扩展的</p></li><li><p>Ablation Study : 联邦学习结合迁移学习，每个用户模型都可以获得更好的分类性能。原因:</p><ul><li>通过联邦学习，服务器可以间接利用来自多个用户的更多信息，从而获得更一般化的云模型</li><li>通过迁移学习，用户可以利用云模型获得更个性化的用户模型</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Federated Transfer Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Client-Edge-Cloud Hierarchical Federated Learning</title>
    <link href="/2021/07/18/PaperList-01/"/>
    <url>/2021/07/18/PaperList-01/</url>
    
    <content type="html"><![CDATA[<p>简述：为了减少模型训练时间和设备的资源消耗，提出一个由HierFAVG算法支持的Client-Edge-Cloud分层联邦学习体系结构</p><span id="more"></span><h4 id="研究主题"><a href="#研究主题" class="headerlink" title="研究主题"></a><code>研究主题</code></h4><ul><li><strong>DOI：10.1109/ICC40277.2020.9148862</strong></li></ul><h5 id="1-研究主题"><a href="#1-研究主题" class="headerlink" title="1. 研究主题"></a>1. 研究主题</h5><ul><li>本文针对FedAvg算法带来的大量的通讯开销和边缘计算提出了一种新的结构（客户端-边缘-云端分层的联邦学习系统）以及HierFAVG算法</li><li>创新点<ul><li>HierFAVG算法允许多个边缘服务器执行部分模型聚合。通过这种方式，模型可以被更快地训练，并且可以实现更好的通信-计算权衡</li><li>引入客户端-边缘-云端分层的联邦学习系统，首先在中间边缘服务器进行边缘的局部聚合，再在云端进行全局聚合，减少模型训练时间和终端设备的能量消耗</li></ul></li></ul><h5 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2. 关键技术"></a>2. 关键技术</h5><ul><li>收敛性分析<ul><li>目标：证明真正的权值w(k)与虚拟集中序列u{q}(k)没有太大的偏差</li><li>关键点：证明真正的权值w(k)与虚拟集中序列u{q}(k)没有太大的偏差</li><li>注：数据是由每个客户端单独生成的，本地数据分布可能不均衡，非iid数据分布[14]会严重影响模型性能</li><li>结论<ul><li><strong>频繁的局部模型平均化可以减少所需的局部迭代次数</strong></li><li><strong>可用于减少与云端通信的方法：使边缘数据集的分布达到IID</strong></li></ul></li></ul></li><li>HierFAVG算法</li></ul><h5 id="3-相关问题"><a href="#3-相关问题" class="headerlink" title="3. 相关问题"></a>3. 相关问题</h5><p>​    1. 将FAVG算法扩展到层次设置，新算法还会收敛吗?</p><p>​    2. 给定了模型聚合的两个级别(一个在边缘，一个在云)，在每个级别上模型聚合的频率应该是多少?</p><p>​    3. 通过允许频繁的本地更新，可以实现更好的延迟-能量权衡吗?</p><h4 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a><code>研究方法</code></h4><p><img src="https://gitee.com/serein-set/pic/raw/master/20210718204716.png"></p><ul><li><p>与cloud-based相比，client-edge-cloud优势：减少与云的昂贵通信，并辅以高效的客户端边缘更新，从而显著减少运行时间和本地迭代的数量</p></li><li><p>与edge-based相比：分层的FL在模型训练方面将优于基于边缘的FL</p></li></ul><h5 id="1-HierFAVG算法-–Client-Edge-Cloud-分层联邦学习"><a href="#1-HierFAVG算法-–Client-Edge-Cloud-分层联邦学习" class="headerlink" title="1. HierFAVG算法 –Client-Edge-Cloud 分层联邦学习"></a>1. HierFAVG算法 –Client-Edge-Cloud 分层联邦学习</h5><ul><li><p>关键步骤：</p><ul><li>局部聚合–边缘–每个边缘间隔的末端：在每个client的每κ1次本地更新后，每个边缘服务器都会聚合其clients的模型。</li><li>全局聚合–云–每个云间隔的末端：然后在每κ2个边缘模型聚合后，云服务器会聚合所有边缘服务器的模型，这意味着与云的通信每 κ1κ2 个本地更新发生一次</li></ul></li><li><p>算法</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210718211838.png"></p></li><li><p>HierFAVG和FAVG比较</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210718211937.png"></p></li></ul><h4 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a><code>实验结论</code></h4><ul><li>实验重点：与基于云的FL系统进行比较</li></ul><ol><li><p>系统设置与假设</p><ul><li><p>假设每个边缘服务器用相同数量的训练数据授权给相同数量的客户。我们拥有50个客户端、5个边缘服务器和一个云服务器的分层FL系统</p></li><li><p>任务：图像分类任务–CNN </p></li><li><p>梯度下降法：批量大小为20的小批量随机梯度下降(SGD)</p></li><li><p>数据集：标准数据集MNIST和CIFAR-10</p><ul><li><p>MNIST：– 21840个可训练参数</p><ul><li>初始学习率为0.01，并以0.995的速率随每个epoch衰减</li><li>以下两种MNIST非iid情况:<ol><li>Edge-IID：为每个客户端分配一个类的样本，并为每个边缘分配10个不同类别的客户。边缘之间的数据集是IID的</li><li>Edge-NIID：每个客户端分配一个类别的样本，给每个边缘分配10个客户，共5个类别的标签。边缘之间的数据集为non-IID。</li></ol></li></ul></li><li><p>CIFAR-10：– 5852170个参数 – 3个卷积块</p><ul><li>初始学习率为0.1，并以0.992的速率随每个epoch衰减</li></ul></li></ul></li></ul></li></ol><ol start="2"><li><p>结果</p><p><img src="https://gitee.com/serein-set/pic/raw/master/20210719164003.png"></p><ul><li><strong>结论</strong>1<ul><li>与云的通信频率固定(即κ1· κ2固定)时，与边缘的通信越频繁(即较少的局部更新κ1)，训练过程就越快。</li><li>将与云服务器的通信频率固定在60次局部迭代时，即κ1κ2=60，并改变κ1的值。对于两种non-IID数据分布，当我们减小k1时，只需较少的训练次数就可以达到预期的精度，这意味着在设备上需要较少的本地计算。</li><li>当边缘之间的数据集是IID且与边缘服务器的通信频率固定时，降低与云服务器的通信频率不会减慢训练过程</li><li>对于Edge-NIID，当κ1=  60时，增大κ2会使训练过程变慢。在Edge-IID场景下，我们可能能够进一步减少与云的高成本通信，而性能损失很小。</li></ul></li></ul><p><img src="https://gitee.com/serein-set/pic/raw/master/20210719164214.png"></p><ul><li><strong>结论2</strong><ul><li>分层FL比基于云的FL在训练时间上有很大优势：对于MNIST和CIF AR-10数据集，随着我们增加与边缘服务器的通信频率（即κ2），达到一定测试精度的训练时间单调地<strong>减少</strong></li><li>对于本地能源消耗，它首先减少，然后随着κ2的增加而增加。因为<strong>适度增加客户端与边缘的通信频率可以减少消耗的能量</strong>，因为需要的本地计算较少。但是过于频繁的边缘-客户通信也会消耗额外的能量用于数据传输。如果目标是最小化设备能耗，我们应该通过调整κ1、κ2来仔细平衡计算和通信能量</li></ul></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Edge Learning</tag>
      
      <tag>Federated Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
